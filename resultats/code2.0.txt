# ============================================
# Bloc 12 : Auto-calibration de T_bias vers une cible d'alpha_mean
# ============================================

import numpy as np
import pandas as pd

def simulate_full(a_abs=0.5, b=1.0, D=0.01, T=200, dt=0.01,
                  d0=3.5, beta=0.5, n=1000, T_bias=-1.5,
                  mu=0.05, gamma=0.2, seed=789):
    N = int(T/dt); rng = np.random.default_rng(seed)
    phi = np.zeros(N); phi[0] = 0.05
    d_eff = np.zeros(N); T_log = np.zeros(N); mem = np.zeros(N)
    ns = np.sqrt(2*D*dt); ed = np.exp(-gamma*dt)
    for t in range(1, N):
        d_eff[t] = d0 + beta*phi[t-1]**2
        mem[t] = ed*mem[t-1] + mu*phi[t-1]*dt
        T_log[t] = (d_eff[t]-4)*np.log(n) + mem[t] + T_bias
        alpha_eff = a_abs * (-T_log[t])
        drift = alpha_eff*phi[t-1] - b*phi[t-1]**3
        phi[t] = phi[t-1] + dt*drift + ns*rng.normal()
    phi_stationnaire = np.abs(phi[int(0.8*N):])
    amp_obs = np.mean(phi_stationnaire)
    T_mean = np.mean(T_log[int(0.8*N):])
    alpha_mean = a_abs * (-T_mean)
    amp_theo = np.sqrt(alpha_mean/b) if alpha_mean > 0 else 0.0
    err = abs(amp_obs - amp_theo)/amp_theo if amp_theo > 0 else None
    return amp_obs, amp_theo, err, alpha_mean, T_mean

# Cible pour alpha_mean
alpha_target = 0.8
# Grille de T_bias à tester
T_bias_grid = np.linspace(-2.0, -1.0, 11)

rows = []
for T_bias in T_bias_grid:
    amp_obs, amp_theo, err, alpha_mean, T_mean = simulate_full(T_bias=T_bias)
    rows.append({
        "T_bias": T_bias,
        "alpha_mean": alpha_mean,
        "T_mean": T_mean,
        "amplitude_obs": amp_obs,
        "amplitude_theo": amp_theo,
        "erreur_relative": err
    })

df_bias = pd.DataFrame(rows)
# Choix automatique: alpha_mean proche de la cible et erreur minimale
df_bias["alpha_gap"] = np.abs(df_bias["alpha_mean"] - alpha_target)
df_bias_sorted = df_bias.sort_values(by=["alpha_gap", "erreur_relative"], ascending=[True, True])

print("Top 5 configurations par proximité d'alpha_target et erreur minimale:")
print(df_bias_sorted.head(5)[["T_bias","alpha_mean","amplitude_obs","amplitude_theo","erreur_relative"]])

best = df_bias_sorted.iloc[0]
print(f"\nRecommandation: T_bias ≈ {best['T_bias']:.3f}, alpha_mean ≈ {best['alpha_mean']:.3f}, "
      f"erreur ≈ {best['erreur_relative']:.3f}")