# ============================================
# Bloc 7 : Ajustement des paramètres + Heatmap
# ============================================

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Pour reproductibilité
rng = np.random.default_rng(42)

# Fonction de simulation
def simuler_phi(D, T, mu, gamma, dt=0.01, a=-0.5, b=1.0, d0=3.5, beta=0.5, n=1000):
    N = int(T / dt)
    phi = np.zeros(N)
    mem = np.zeros(N)
    d_eff = np.zeros(N)
    T_log = np.zeros(N)

    phi[0] = 0.05
    exp_decay = np.exp(-gamma * dt)
    noise_scale = np.sqrt(2 * D * dt)

    for t in range(1, N):
        d_eff[t] = d0 + beta * phi[t - 1] ** 2
        mem[t] = exp_decay * mem[t - 1] + mu * phi[t - 1] * dt
        T_log[t] = (d_eff[t] - 4) * np.log(n) + mem[t]
        drift = (-a) * T_log[t] * phi[t - 1] - b * phi[t - 1] ** 3
        xi = rng.normal()
        phi[t] = phi[t - 1] + dt * drift + noise_scale * xi

    # Amplitude stationnaire
    phi_stationnaire = np.abs(phi[int(0.8 * N):])
    amplitude_obs = np.mean(phi_stationnaire)
    amplitude_theo = np.sqrt(-a / b)
    erreur_relative = np.abs(amplitude_obs - amplitude_theo) / amplitude_theo

    return amplitude_obs, amplitude_theo, erreur_relative

# Paramètres à explorer
D_vals = [0.1, 0.01, 0.001]
T_vals = [20, 100, 200]
mu_vals = [0.1, 0.0]
gamma_vals = [0.5, 0.0]

# Balayage
resultats = []
for D in D_vals:
    for T in T_vals:
        for mu in mu_vals:
            for gamma in gamma_vals:
                amp_obs, amp_theo, err_rel = simuler_phi(D, T, mu, gamma)
                resultats.append({
                    "D": D, "T": T, "mu": mu, "gamma": gamma,
                    "amplitude_obs": amp_obs,
                    "amplitude_theo": amp_theo,
                    "erreur_relative": err_rel
                })

# DataFrame
df_adj = pd.DataFrame(resultats)

# 1) Afficher les 10 meilleures combinaisons
df_sorted = df_adj.sort_values("erreur_relative").reset_index(drop=True)
print("Top 10 combinaisons avec erreur minimale :")
print(df_sorted.head(10))

# 2) Heatmap pour mu=0.0 et gamma=0.0
df_heat = df_adj[(df_adj.mu == 0.0) & (df_adj.gamma == 0.0)]
pivot = df_heat.pivot(index="T", columns="D", values="erreur_relative")

plt.figure(figsize=(8,6))
sns.heatmap(pivot, annot=True, fmt=".2f", cmap="viridis")
plt.title("Erreur relative en fonction de D et T (mu=0.0, gamma=0.0)")
plt.xlabel("D (bruit)")
plt.ylabel("T (durée)")
plt.tight_layout()
plt.show()