# ============================================
# Bloc 14 : Visualisation multi-cas synthétiques robustes
# ============================================

import numpy as np
import matplotlib.pyplot as plt

# Paramètres fixes globaux
D = 0.01
T = 200
dt = 0.01
N = int(T/dt)
a_abs = 0.5
b = 1.0
n = 1000
T_bias = -1.0

# Trois cas sélectionnés du top 10 robustesse
cases = [
    {"mu":0.10, "gamma":0.0, "d0":3.2, "beta":0.6, "alpha_mean":1.023, "err":0.000021},
    {"mu":0.05, "gamma":0.0, "d0":3.6, "beta":0.2, "alpha_mean":0.945, "err":0.000075},
    {"mu":0.10, "gamma":0.0, "d0":3.6, "beta":0.6, "alpha_mean":0.859, "err":0.000378},
]

times = np.arange(N)*dt
rng = np.random.default_rng(42)

plt.figure(figsize=(12,6))

for case in cases:
    mu, gamma, d0, beta = case["mu"], case["gamma"], case["d0"], case["beta"]
    alpha_mean, err = case["alpha_mean"], case["err"]

    phi = np.zeros(N); phi[0] = 0.05
    mem = np.zeros(N); d_eff = np.zeros(N); T_log = np.zeros(N)
    exp_decay = np.exp(-gamma*dt)
    noise_scale = np.sqrt(2*D*dt)

    for t in range(1, N):
        d_eff[t] = d0 + beta*phi[t-1]**2
        mem[t] = exp_decay*mem[t-1] + mu*phi[t-1]*dt
        T_log[t] = (d_eff[t]-4)*np.log(n) + mem[t] + T_bias
        alpha_eff = a_abs * (-T_log[t])
        drift = alpha_eff*phi[t-1] - b*phi[t-1]**3
        phi[t] = phi[t-1] + dt*drift + noise_scale*rng.normal()

    # Tracé
    label = f"μ={mu}, γ={gamma}, d₀={d0}, β={beta}, err={err:.4f}"
    plt.plot(times, phi, label=label)
    plt.axhline(np.sqrt(alpha_mean/b), color='gray', ls='--', alpha=0.5)

plt.xlabel("Temps t")
plt.ylabel("Φ*(t)")
plt.title("Comparaison de Φ*(t) pour 3 cas robustes")
plt.legend()
plt.grid(True)
plt.show()